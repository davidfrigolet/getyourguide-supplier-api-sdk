<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace Gyg\Thrift\Service\SupplierApi;


final class Category {
  const ADULT = 0;
  const CHILD = 1;
  const YOUTH = 2;
  const INFANT = 3;
  const SENIOR = 4;
  const STUDENT = 5;
  const EU_CITIZEN = 6;
  const MILITARY = 7;
  const COLLECTIVE = 8;
  static public $__names = array(
    0 => 'ADULT',
    1 => 'CHILD',
    2 => 'YOUTH',
    3 => 'INFANT',
    4 => 'SENIOR',
    5 => 'STUDENT',
    6 => 'EU_CITIZEN',
    7 => 'MILITARY',
    8 => 'COLLECTIVE',
  );
  static public $__values = array(
    'ADULT' => 0,
    'CHILD' => 1,
    'YOUTH' => 2,
    'INFANT' => 3,
    'SENIOR' => 4,
    'STUDENT' => 5,
    'EU_CITIZEN' => 6,
    'MILITARY' => 7,
    'COLLECTIVE' => 8,
  );
}

$GLOBALS['E_Category'] = Category::$__values;

final class TicketCodeType {
  const TEXT = 0;
  const BARCODE_CODE39 = 1;
  const BARCODE_CODE128 = 2;
  const QR_CODE = 3;
  const DATA_MATRIX = 4;
  const EAN_13 = 5;
  const ITF = 6;
  static public $__names = array(
    0 => 'TEXT',
    1 => 'BARCODE_CODE39',
    2 => 'BARCODE_CODE128',
    3 => 'QR_CODE',
    4 => 'DATA_MATRIX',
    5 => 'EAN_13',
    6 => 'ITF',
  );
  static public $__values = array(
    'TEXT' => 0,
    'BARCODE_CODE39' => 1,
    'BARCODE_CODE128' => 2,
    'QR_CODE' => 3,
    'DATA_MATRIX' => 4,
    'EAN_13' => 5,
    'ITF' => 6,
  );
}

$GLOBALS['E_TicketCodeType'] = TicketCodeType::$__values;

final class TestStatus {
  const OK = 0;
  const ERROR = 1;
  static public $__names = array(
    0 => 'OK',
    1 => 'ERROR',
  );
  static public $__values = array(
    'OK' => 0,
    'ERROR' => 1,
  );
}

$GLOBALS['E_TestStatus'] = TestStatus::$__values;

final class FunctionToTest {
  const GET_AVAILABILITIES = 0;
  const RESERVE = 1;
  const BOOK = 2;
  const CANCEL_RESERVATION = 3;
  const CANCEL_BOOKING = 4;
  static public $__names = array(
    0 => 'GET_AVAILABILITIES',
    1 => 'RESERVE',
    2 => 'BOOK',
    3 => 'CANCEL_RESERVATION',
    4 => 'CANCEL_BOOKING',
  );
  static public $__values = array(
    'GET_AVAILABILITIES' => 0,
    'RESERVE' => 1,
    'BOOK' => 2,
    'CANCEL_RESERVATION' => 3,
    'CANCEL_BOOKING' => 4,
  );
}

$GLOBALS['E_FunctionToTest'] = FunctionToTest::$__values;

class BookingItem implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'category',
      'type' => \TType::I32,
      'enum' => 'Category',
      ),
    2 => array(
      'var' => 'count',
      'type' => \TType::I32,
      ),
    );
  public static $_TFIELDMAP = array(
    'category' => 1,
    'count' => 2,
  );
  const STRUCTURAL_ID = 880939940359536746;
  public $category = null;
  public $count = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'BookingItem constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'BookingItem';
  }

  public static function __set_state($vals) {
    return new BookingItem($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BookingItem');
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', \TType::I32, 1);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', \TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Traveler implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'firstName',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'lastName',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'email',
      'type' => \TType::STRING,
      ),
    4 => array(
      'var' => 'phoneNumber',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'firstName' => 1,
    'lastName' => 2,
    'email' => 3,
    'phoneNumber' => 4,
  );
  const STRUCTURAL_ID = 4336857204057704800;
  public $firstName = null;
  public $lastName = null;
  public $email = null;
  public $phoneNumber = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['firstName'])) {
        $this->firstName = $vals['firstName'];
      }
      if (isset($vals['lastName'])) {
        $this->lastName = $vals['lastName'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['phoneNumber'])) {
        $this->phoneNumber = $vals['phoneNumber'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Traveler constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Traveler';
  }

  public static function __set_state($vals) {
    return new Traveler($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->firstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->lastName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->phoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Traveler');
    if ($this->firstName !== null) {
      $xfer += $output->writeFieldBegin('firstName', \TType::STRING, 1);
      $xfer += $output->writeString($this->firstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastName !== null) {
      $xfer += $output->writeFieldBegin('lastName', \TType::STRING, 2);
      $xfer += $output->writeString($this->lastName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', \TType::STRING, 3);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumber !== null) {
      $xfer += $output->writeFieldBegin('phoneNumber', \TType::STRING, 4);
      $xfer += $output->writeString($this->phoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ticket implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'category',
      'type' => \TType::I32,
      'enum' => 'Category',
      ),
    2 => array(
      'var' => 'ticketCode',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'ticketCodeType',
      'type' => \TType::I32,
      'enum' => 'TicketCodeType',
      ),
    );
  public static $_TFIELDMAP = array(
    'category' => 1,
    'ticketCode' => 2,
    'ticketCodeType' => 3,
  );
  const STRUCTURAL_ID = 879575452596784424;
  public $category = null;
  public $ticketCode = null;
  public $ticketCodeType = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['ticketCode'])) {
        $this->ticketCode = $vals['ticketCode'];
      }
      if (isset($vals['ticketCodeType'])) {
        $this->ticketCodeType = $vals['ticketCodeType'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Ticket constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public static function __set_state($vals) {
    return new Ticket($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->ticketCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->ticketCodeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', \TType::I32, 1);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketCode !== null) {
      $xfer += $output->writeFieldBegin('ticketCode', \TType::STRING, 2);
      $xfer += $output->writeString($this->ticketCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ticketCodeType !== null) {
      $xfer += $output->writeFieldBegin('ticketCodeType', \TType::I32, 3);
      $xfer += $output->writeI32($this->ticketCodeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReservationRequest implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'dateTime',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'bookingItems',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => array(
        'type' => \TType::STRUCT,
        'class' => 'BookingItem',
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'productId' => 1,
    'dateTime' => 2,
    'bookingItems' => 3,
  );
  const STRUCTURAL_ID = 6174364133401130547;
  public $productId = null;
  public $dateTime = null;
  public $bookingItems = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['bookingItems'])) {
        $this->bookingItems = $vals['bookingItems'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'ReservationRequest constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'ReservationRequest';
  }

  public static function __set_state($vals) {
    return new ReservationRequest($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::LST) {
            $this->bookingItems = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_size0 === null || $_i4 < $_size0; ++$_i4)
            {
              if ($_size0 === null && !$input->readListHasNext()) {
                break;
              }
              $elem5 = null;
              $elem5 = new BookingItem();
              $xfer += $elem5->read($input);
              $this->bookingItems []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReservationRequest');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', \TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', \TType::STRING, 2);
      $xfer += $output->writeString($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bookingItems !== null) {
      if (!is_array($this->bookingItems) && !(($this->bookingItems instanceof \Iterator || $this->bookingItems instanceof \IteratorAggregate) && $this->bookingItems instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bookingItems', \TType::LST, 3);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->bookingItems));
        {
          foreach ($this->bookingItems as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReservationResponse implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'reservationReference',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'reservationExpiration',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'reservationReference' => 1,
    'reservationExpiration' => 2,
  );
  const STRUCTURAL_ID = 5986745794177685634;
  public $reservationReference = null;
  public $reservationExpiration = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reservationReference'])) {
        $this->reservationReference = $vals['reservationReference'];
      }
      if (isset($vals['reservationExpiration'])) {
        $this->reservationExpiration = $vals['reservationExpiration'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'ReservationResponse constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'ReservationResponse';
  }

  public static function __set_state($vals) {
    return new ReservationResponse($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->reservationReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->reservationExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReservationResponse');
    if ($this->reservationReference !== null) {
      $xfer += $output->writeFieldBegin('reservationReference', \TType::STRING, 1);
      $xfer += $output->writeString($this->reservationReference);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->reservationExpiration) && $this->reservationExpiration !== null) {
      $xfer += $output->writeFieldBegin('reservationExpiration', \TType::STRING, 2);
      $xfer += $output->writeString($this->reservationExpiration);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BookingRequest implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'dateTime',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'reservationReference',
      'type' => \TType::STRING,
      ),
    4 => array(
      'var' => 'gygBookingReference',
      'type' => \TType::STRING,
      ),
    5 => array(
      'var' => 'bookingItems',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => array(
        'type' => \TType::STRUCT,
        'class' => 'BookingItem',
        ),
        'format' => 'array',
      ),
    6 => array(
      'var' => 'language',
      'type' => \TType::STRING,
      ),
    7 => array(
      'var' => 'travelers',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => array(
        'type' => \TType::STRUCT,
        'class' => 'Traveler',
        ),
        'format' => 'array',
      ),
    8 => array(
      'var' => 'travelerHotel',
      'type' => \TType::STRING,
      ),
    9 => array(
      'var' => 'comment',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'productId' => 1,
    'dateTime' => 2,
    'reservationReference' => 3,
    'gygBookingReference' => 4,
    'bookingItems' => 5,
    'language' => 6,
    'travelers' => 7,
    'travelerHotel' => 8,
    'comment' => 9,
  );
  const STRUCTURAL_ID = 3521118967154303078;
  public $productId = null;
  public $dateTime = null;
  public $reservationReference = null;
  public $gygBookingReference = null;
  public $bookingItems = null;
  public $language = null;
  public $travelers = null;
  public $travelerHotel = null;
  public $comment = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['reservationReference'])) {
        $this->reservationReference = $vals['reservationReference'];
      }
      if (isset($vals['gygBookingReference'])) {
        $this->gygBookingReference = $vals['gygBookingReference'];
      }
      if (isset($vals['bookingItems'])) {
        $this->bookingItems = $vals['bookingItems'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['travelers'])) {
        $this->travelers = $vals['travelers'];
      }
      if (isset($vals['travelerHotel'])) {
        $this->travelerHotel = $vals['travelerHotel'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'BookingRequest constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'BookingRequest';
  }

  public static function __set_state($vals) {
    return new BookingRequest($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->reservationReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->gygBookingReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == \TType::LST) {
            $this->bookingItems = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_size7 === null || $_i11 < $_size7; ++$_i11)
            {
              if ($_size7 === null && !$input->readListHasNext()) {
                break;
              }
              $elem12 = null;
              $elem12 = new BookingItem();
              $xfer += $elem12->read($input);
              $this->bookingItems []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == \TType::LST) {
            $this->travelers = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_size13 === null || $_i17 < $_size13; ++$_i17)
            {
              if ($_size13 === null && !$input->readListHasNext()) {
                break;
              }
              $elem18 = null;
              $elem18 = new Traveler();
              $xfer += $elem18->read($input);
              $this->travelers []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->travelerHotel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BookingRequest');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', \TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', \TType::STRING, 2);
      $xfer += $output->writeString($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationReference !== null) {
      $xfer += $output->writeFieldBegin('reservationReference', \TType::STRING, 3);
      $xfer += $output->writeString($this->reservationReference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gygBookingReference !== null) {
      $xfer += $output->writeFieldBegin('gygBookingReference', \TType::STRING, 4);
      $xfer += $output->writeString($this->gygBookingReference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bookingItems !== null) {
      if (!is_array($this->bookingItems) && !(($this->bookingItems instanceof \Iterator || $this->bookingItems instanceof \IteratorAggregate) && $this->bookingItems instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bookingItems', \TType::LST, 5);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->bookingItems));
        {
          foreach ($this->bookingItems as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', \TType::STRING, 6);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->travelers !== null) {
      if (!is_array($this->travelers) && !(($this->travelers instanceof \Iterator || $this->travelers instanceof \IteratorAggregate) && $this->travelers instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('travelers', \TType::LST, 7);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->travelers));
        {
          foreach ($this->travelers as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->travelerHotel) && $this->travelerHotel !== null) {
      $xfer += $output->writeFieldBegin('travelerHotel', \TType::STRING, 8);
      $xfer += $output->writeString($this->travelerHotel);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->comment) && $this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', \TType::STRING, 9);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BookingResponse implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'bookingReference',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'tickets',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => array(
        'type' => \TType::STRUCT,
        'class' => 'Ticket',
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'bookingReference' => 1,
    'tickets' => 2,
  );
  const STRUCTURAL_ID = 5634798419036150175;
  public $bookingReference = null;
  public $tickets = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['bookingReference'])) {
        $this->bookingReference = $vals['bookingReference'];
      }
      if (isset($vals['tickets'])) {
        $this->tickets = $vals['tickets'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'BookingResponse constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'BookingResponse';
  }

  public static function __set_state($vals) {
    return new BookingResponse($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->bookingReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::LST) {
            $this->tickets = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_size21 === null || $_i25 < $_size21; ++$_i25)
            {
              if ($_size21 === null && !$input->readListHasNext()) {
                break;
              }
              $elem26 = null;
              $elem26 = new Ticket();
              $xfer += $elem26->read($input);
              $this->tickets []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BookingResponse');
    if ($this->bookingReference !== null) {
      $xfer += $output->writeFieldBegin('bookingReference', \TType::STRING, 1);
      $xfer += $output->writeString($this->bookingReference);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tickets !== null) {
      if (!is_array($this->tickets) && !(($this->tickets instanceof \Iterator || $this->tickets instanceof \IteratorAggregate) && $this->tickets instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tickets', \TType::LST, 2);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->tickets));
        {
          foreach ($this->tickets as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReservationCancelation implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'reservationReference',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'reservationReference' => 1,
  );
  const STRUCTURAL_ID = 2260979268500091332;
  public $reservationReference = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['reservationReference'])) {
        $this->reservationReference = $vals['reservationReference'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'ReservationCancelation constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'ReservationCancelation';
  }

  public static function __set_state($vals) {
    return new ReservationCancelation($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->reservationReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReservationCancelation');
    if ($this->reservationReference !== null) {
      $xfer += $output->writeFieldBegin('reservationReference', \TType::STRING, 1);
      $xfer += $output->writeString($this->reservationReference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BookingCancelation implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'bookingReference',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'bookingReference' => 1,
  );
  const STRUCTURAL_ID = 6745474044829519709;
  public $bookingReference = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['bookingReference'])) {
        $this->bookingReference = $vals['bookingReference'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'BookingCancelation constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'BookingCancelation';
  }

  public static function __set_state($vals) {
    return new BookingCancelation($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->bookingReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BookingCancelation');
    if ($this->bookingReference !== null) {
      $xfer += $output->writeFieldBegin('bookingReference', \TType::STRING, 1);
      $xfer += $output->writeString($this->bookingReference);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Availability implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'dateTime',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'vacancies',
      'type' => \TType::I32,
      ),
    );
  public static $_TFIELDMAP = array(
    'productId' => 1,
    'dateTime' => 2,
    'vacancies' => 3,
  );
  const STRUCTURAL_ID = 4939607559050396849;
  public $productId = null;
  public $dateTime = null;
  public $vacancies = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['vacancies'])) {
        $this->vacancies = $vals['vacancies'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Availability constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Availability';
  }

  public static function __set_state($vals) {
    return new Availability($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->vacancies);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Availability');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', \TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', \TType::STRING, 2);
      $xfer += $output->writeString($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vacancies !== null) {
      $xfer += $output->writeFieldBegin('vacancies', \TType::I32, 3);
      $xfer += $output->writeI32($this->vacancies);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AvailabilityResponse implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'availabilities',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => array(
        'type' => \TType::STRUCT,
        'class' => 'Availability',
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'availabilities' => 1,
  );
  const STRUCTURAL_ID = 8429275933537226578;
  public $availabilities = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['availabilities'])) {
        $this->availabilities = $vals['availabilities'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'AvailabilityResponse constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'AvailabilityResponse';
  }

  public static function __set_state($vals) {
    return new AvailabilityResponse($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::LST) {
            $this->availabilities = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_size28 === null || $_i32 < $_size28; ++$_i32)
            {
              if ($_size28 === null && !$input->readListHasNext()) {
                break;
              }
              $elem33 = null;
              $elem33 = new Availability();
              $xfer += $elem33->read($input);
              $this->availabilities []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AvailabilityResponse');
    if ($this->availabilities !== null) {
      if (!is_array($this->availabilities) && !(($this->availabilities instanceof \Iterator || $this->availabilities instanceof \IteratorAggregate) && $this->availabilities instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availabilities', \TType::LST, 1);
      {
        $output->writeListBegin(\TType::STRUCT, count($this->availabilities));
        {
          foreach ($this->availabilities as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NoAvailabilityException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'NoAvailabilityException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'NoAvailabilityException';
  }

  public static function __set_state($vals) {
    return new NoAvailabilityException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoAvailabilityException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidProductException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'InvalidProductException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'InvalidProductException';
  }

  public static function __set_state($vals) {
    return new InvalidProductException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidProductException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidReservationException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'InvalidReservationException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'InvalidReservationException';
  }

  public static function __set_state($vals) {
    return new InvalidReservationException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidReservationException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InvalidBookingException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'InvalidBookingException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'InvalidBookingException';
  }

  public static function __set_state($vals) {
    return new InvalidBookingException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InvalidBookingException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ValidationException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'ValidationException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'ValidationException';
  }

  public static function __set_state($vals) {
    return new ValidationException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ValidationException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthorizationException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'AuthorizationException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'AuthorizationException';
  }

  public static function __set_state($vals) {
    return new AuthorizationException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthorizationException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InternalSystemException extends \TException implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'message',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'message' => 1,
  );
  const STRUCTURAL_ID = 546500496397478593;
  public $message = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'InternalSystemException constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'InternalSystemException';
  }

  public static function __set_state($vals) {
    return new InternalSystemException($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InternalSystemException');
    if (isset($this->message) && $this->message !== null) {
      $xfer += $output->writeFieldBegin('message', \TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AcceptedResponseData implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'noAvailabilityException',
      'type' => \TType::STRUCT,
      'class' => 'NoAvailabilityException',
      ),
    2 => array(
      'var' => 'invalidProductException',
      'type' => \TType::STRUCT,
      'class' => 'InvalidProductException',
      ),
    3 => array(
      'var' => 'invalidReservationException',
      'type' => \TType::STRUCT,
      'class' => 'InvalidReservationException',
      ),
    4 => array(
      'var' => 'invalidBookingException',
      'type' => \TType::STRUCT,
      'class' => 'InvalidBookingException',
      ),
    5 => array(
      'var' => 'validationException',
      'type' => \TType::STRUCT,
      'class' => 'ValidationException',
      ),
    6 => array(
      'var' => 'authorizationException',
      'type' => \TType::STRUCT,
      'class' => 'AuthorizationException',
      ),
    7 => array(
      'var' => 'internalSystemException',
      'type' => \TType::STRUCT,
      'class' => 'InternalSystemException',
      ),
    8 => array(
      'var' => 'availabilityResponse',
      'type' => \TType::STRUCT,
      'class' => 'AvailabilityResponse',
      ),
    9 => array(
      'var' => 'reservationResponse',
      'type' => \TType::STRUCT,
      'class' => 'ReservationResponse',
      ),
    10 => array(
      'var' => 'bookingResponse',
      'type' => \TType::STRUCT,
      'class' => 'BookingResponse',
      ),
    );
  public static $_TFIELDMAP = array(
    'noAvailabilityException' => 1,
    'invalidProductException' => 2,
    'invalidReservationException' => 3,
    'invalidBookingException' => 4,
    'validationException' => 5,
    'authorizationException' => 6,
    'internalSystemException' => 7,
    'availabilityResponse' => 8,
    'reservationResponse' => 9,
    'bookingResponse' => 10,
  );
  const STRUCTURAL_ID = 7083171154433775509;
  public $noAvailabilityException = null;
  public $invalidProductException = null;
  public $invalidReservationException = null;
  public $invalidBookingException = null;
  public $validationException = null;
  public $authorizationException = null;
  public $internalSystemException = null;
  public $availabilityResponse = null;
  public $reservationResponse = null;
  public $bookingResponse = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['noAvailabilityException'])) {
        $this->noAvailabilityException = $vals['noAvailabilityException'];
      }
      if (isset($vals['invalidProductException'])) {
        $this->invalidProductException = $vals['invalidProductException'];
      }
      if (isset($vals['invalidReservationException'])) {
        $this->invalidReservationException = $vals['invalidReservationException'];
      }
      if (isset($vals['invalidBookingException'])) {
        $this->invalidBookingException = $vals['invalidBookingException'];
      }
      if (isset($vals['validationException'])) {
        $this->validationException = $vals['validationException'];
      }
      if (isset($vals['authorizationException'])) {
        $this->authorizationException = $vals['authorizationException'];
      }
      if (isset($vals['internalSystemException'])) {
        $this->internalSystemException = $vals['internalSystemException'];
      }
      if (isset($vals['availabilityResponse'])) {
        $this->availabilityResponse = $vals['availabilityResponse'];
      }
      if (isset($vals['reservationResponse'])) {
        $this->reservationResponse = $vals['reservationResponse'];
      }
      if (isset($vals['bookingResponse'])) {
        $this->bookingResponse = $vals['bookingResponse'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'AcceptedResponseData constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'AcceptedResponseData';
  }

  public static function __set_state($vals) {
    return new AcceptedResponseData($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRUCT) {
            $this->noAvailabilityException = new NoAvailabilityException();
            $xfer += $this->noAvailabilityException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRUCT) {
            $this->invalidProductException = new InvalidProductException();
            $xfer += $this->invalidProductException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRUCT) {
            $this->invalidReservationException = new InvalidReservationException();
            $xfer += $this->invalidReservationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::STRUCT) {
            $this->invalidBookingException = new InvalidBookingException();
            $xfer += $this->invalidBookingException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == \TType::STRUCT) {
            $this->validationException = new ValidationException();
            $xfer += $this->validationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == \TType::STRUCT) {
            $this->authorizationException = new AuthorizationException();
            $xfer += $this->authorizationException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == \TType::STRUCT) {
            $this->internalSystemException = new InternalSystemException();
            $xfer += $this->internalSystemException->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == \TType::STRUCT) {
            $this->availabilityResponse = new AvailabilityResponse();
            $xfer += $this->availabilityResponse->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == \TType::STRUCT) {
            $this->reservationResponse = new ReservationResponse();
            $xfer += $this->reservationResponse->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == \TType::STRUCT) {
            $this->bookingResponse = new BookingResponse();
            $xfer += $this->bookingResponse->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AcceptedResponseData');
    if ($this->noAvailabilityException !== null) {
      $xfer += $output->writeFieldBegin('noAvailabilityException', \TType::STRUCT, 1);
      $xfer += $this->noAvailabilityException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidProductException !== null) {
      $xfer += $output->writeFieldBegin('invalidProductException', \TType::STRUCT, 2);
      $xfer += $this->invalidProductException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidReservationException !== null) {
      $xfer += $output->writeFieldBegin('invalidReservationException', \TType::STRUCT, 3);
      $xfer += $this->invalidReservationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalidBookingException !== null) {
      $xfer += $output->writeFieldBegin('invalidBookingException', \TType::STRUCT, 4);
      $xfer += $this->invalidBookingException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validationException !== null) {
      $xfer += $output->writeFieldBegin('validationException', \TType::STRUCT, 5);
      $xfer += $this->validationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorizationException !== null) {
      $xfer += $output->writeFieldBegin('authorizationException', \TType::STRUCT, 6);
      $xfer += $this->authorizationException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->internalSystemException !== null) {
      $xfer += $output->writeFieldBegin('internalSystemException', \TType::STRUCT, 7);
      $xfer += $this->internalSystemException->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availabilityResponse !== null) {
      if (!is_object($this->availabilityResponse)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availabilityResponse', \TType::STRUCT, 8);
      $xfer += $this->availabilityResponse->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reservationResponse !== null) {
      if (!is_object($this->reservationResponse)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reservationResponse', \TType::STRUCT, 9);
      $xfer += $this->reservationResponse->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bookingResponse !== null) {
      if (!is_object($this->bookingResponse)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bookingResponse', \TType::STRUCT, 10);
      $xfer += $this->bookingResponse->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TestResult implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'testStatus',
      'type' => \TType::I32,
      'enum' => 'TestStatus',
      ),
    2 => array(
      'var' => 'errorMessage',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'acceptedResponseData',
      'type' => \TType::STRUCT,
      'class' => 'AcceptedResponseData',
      ),
    );
  public static $_TFIELDMAP = array(
    'testStatus' => 1,
    'errorMessage' => 2,
    'acceptedResponseData' => 3,
  );
  const STRUCTURAL_ID = 2403448789054020878;
  public $testStatus = null;
  public $errorMessage = null;
  public $acceptedResponseData = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['testStatus'])) {
        $this->testStatus = $vals['testStatus'];
      }
      if (isset($vals['errorMessage'])) {
        $this->errorMessage = $vals['errorMessage'];
      }
      if (isset($vals['acceptedResponseData'])) {
        $this->acceptedResponseData = $vals['acceptedResponseData'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'TestResult constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'TestResult';
  }

  public static function __set_state($vals) {
    return new TestResult($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->testStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->errorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRUCT) {
            $this->acceptedResponseData = new AcceptedResponseData();
            $xfer += $this->acceptedResponseData->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TestResult');
    if ($this->testStatus !== null) {
      $xfer += $output->writeFieldBegin('testStatus', \TType::I32, 1);
      $xfer += $output->writeI32($this->testStatus);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->errorMessage) && $this->errorMessage !== null) {
      $xfer += $output->writeFieldBegin('errorMessage', \TType::STRING, 2);
      $xfer += $output->writeString($this->errorMessage);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->acceptedResponseData) && $this->acceptedResponseData !== null) {
      if (!is_object($this->acceptedResponseData)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acceptedResponseData', \TType::STRUCT, 3);
      $xfer += $this->acceptedResponseData->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TestDataOverride implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'productId',
      'type' => \TType::STRING,
      ),
    2 => array(
      'var' => 'fromDateTime',
      'type' => \TType::STRING,
      ),
    3 => array(
      'var' => 'toDateTime',
      'type' => \TType::STRING,
      ),
    4 => array(
      'var' => 'dateTime',
      'type' => \TType::STRING,
      ),
    5 => array(
      'var' => 'reservationReference',
      'type' => \TType::STRING,
      ),
    6 => array(
      'var' => 'gygBookingReference',
      'type' => \TType::STRING,
      ),
    7 => array(
      'var' => 'adultTicketsQuantity',
      'type' => \TType::I32,
      ),
    8 => array(
      'var' => 'childTicketsQuantity',
      'type' => \TType::I32,
      ),
    9 => array(
      'var' => 'bookingReference',
      'type' => \TType::STRING,
      ),
    10 => array(
      'var' => 'language',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'productId' => 1,
    'fromDateTime' => 2,
    'toDateTime' => 3,
    'dateTime' => 4,
    'reservationReference' => 5,
    'gygBookingReference' => 6,
    'adultTicketsQuantity' => 7,
    'childTicketsQuantity' => 8,
    'bookingReference' => 9,
    'language' => 10,
  );
  const STRUCTURAL_ID = 2786195903452083791;
  public $productId = null;
  public $fromDateTime = null;
  public $toDateTime = null;
  public $dateTime = null;
  public $reservationReference = null;
  public $gygBookingReference = null;
  public $adultTicketsQuantity = null;
  public $childTicketsQuantity = null;
  public $bookingReference = null;
  public $language = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['fromDateTime'])) {
        $this->fromDateTime = $vals['fromDateTime'];
      }
      if (isset($vals['toDateTime'])) {
        $this->toDateTime = $vals['toDateTime'];
      }
      if (isset($vals['dateTime'])) {
        $this->dateTime = $vals['dateTime'];
      }
      if (isset($vals['reservationReference'])) {
        $this->reservationReference = $vals['reservationReference'];
      }
      if (isset($vals['gygBookingReference'])) {
        $this->gygBookingReference = $vals['gygBookingReference'];
      }
      if (isset($vals['adultTicketsQuantity'])) {
        $this->adultTicketsQuantity = $vals['adultTicketsQuantity'];
      }
      if (isset($vals['childTicketsQuantity'])) {
        $this->childTicketsQuantity = $vals['childTicketsQuantity'];
      }
      if (isset($vals['bookingReference'])) {
        $this->bookingReference = $vals['bookingReference'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'TestDataOverride constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'TestDataOverride';
  }

  public static function __set_state($vals) {
    return new TestDataOverride($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->fromDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->toDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->dateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->reservationReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->gygBookingReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->adultTicketsQuantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->childTicketsQuantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->bookingReference);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TestDataOverride');
    if (isset($this->productId) && $this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', \TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->fromDateTime) && $this->fromDateTime !== null) {
      $xfer += $output->writeFieldBegin('fromDateTime', \TType::STRING, 2);
      $xfer += $output->writeString($this->fromDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->toDateTime) && $this->toDateTime !== null) {
      $xfer += $output->writeFieldBegin('toDateTime', \TType::STRING, 3);
      $xfer += $output->writeString($this->toDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->dateTime) && $this->dateTime !== null) {
      $xfer += $output->writeFieldBegin('dateTime', \TType::STRING, 4);
      $xfer += $output->writeString($this->dateTime);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->reservationReference) && $this->reservationReference !== null) {
      $xfer += $output->writeFieldBegin('reservationReference', \TType::STRING, 5);
      $xfer += $output->writeString($this->reservationReference);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->gygBookingReference) && $this->gygBookingReference !== null) {
      $xfer += $output->writeFieldBegin('gygBookingReference', \TType::STRING, 6);
      $xfer += $output->writeString($this->gygBookingReference);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->adultTicketsQuantity) && $this->adultTicketsQuantity !== null) {
      $xfer += $output->writeFieldBegin('adultTicketsQuantity', \TType::I32, 7);
      $xfer += $output->writeI32($this->adultTicketsQuantity);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->childTicketsQuantity) && $this->childTicketsQuantity !== null) {
      $xfer += $output->writeFieldBegin('childTicketsQuantity', \TType::I32, 8);
      $xfer += $output->writeI32($this->childTicketsQuantity);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->bookingReference) && $this->bookingReference !== null) {
      $xfer += $output->writeFieldBegin('bookingReference', \TType::STRING, 9);
      $xfer += $output->writeString($this->bookingReference);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->language) && $this->language !== null) {
      $xfer += $output->writeFieldBegin('language', \TType::STRING, 10);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
